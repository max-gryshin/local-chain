// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: transport/transport.proto

package transport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocalChainManagerClient is the client API for LocalChainManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalChainManagerClient interface {
	AddPeer(ctx context.Context, in *AddPeerRequest, opts ...grpc.CallOption) (*AddPeerResponse, error)
	RemovePeer(ctx context.Context, in *RemovePeerRequest, opts ...grpc.CallOption) (*RemovePeerResponse, error)
	AddVoter(ctx context.Context, in *AddVoterRequest, opts ...grpc.CallOption) (*AddVoterResponse, error)
	AddTransaction(ctx context.Context, in *AddTransactionRequest, opts ...grpc.CallOption) (*AddTransactionResponse, error)
}

type localChainManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalChainManagerClient(cc grpc.ClientConnInterface) LocalChainManagerClient {
	return &localChainManagerClient{cc}
}

func (c *localChainManagerClient) AddPeer(ctx context.Context, in *AddPeerRequest, opts ...grpc.CallOption) (*AddPeerResponse, error) {
	out := new(AddPeerResponse)
	err := c.cc.Invoke(ctx, "/LocalChainManager/AddPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localChainManagerClient) RemovePeer(ctx context.Context, in *RemovePeerRequest, opts ...grpc.CallOption) (*RemovePeerResponse, error) {
	out := new(RemovePeerResponse)
	err := c.cc.Invoke(ctx, "/LocalChainManager/RemovePeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localChainManagerClient) AddVoter(ctx context.Context, in *AddVoterRequest, opts ...grpc.CallOption) (*AddVoterResponse, error) {
	out := new(AddVoterResponse)
	err := c.cc.Invoke(ctx, "/LocalChainManager/AddVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localChainManagerClient) AddTransaction(ctx context.Context, in *AddTransactionRequest, opts ...grpc.CallOption) (*AddTransactionResponse, error) {
	out := new(AddTransactionResponse)
	err := c.cc.Invoke(ctx, "/LocalChainManager/AddTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalChainManagerServer is the server API for LocalChainManager service.
// All implementations must embed UnimplementedLocalChainManagerServer
// for forward compatibility
type LocalChainManagerServer interface {
	AddPeer(context.Context, *AddPeerRequest) (*AddPeerResponse, error)
	RemovePeer(context.Context, *RemovePeerRequest) (*RemovePeerResponse, error)
	AddVoter(context.Context, *AddVoterRequest) (*AddVoterResponse, error)
	AddTransaction(context.Context, *AddTransactionRequest) (*AddTransactionResponse, error)
	mustEmbedUnimplementedLocalChainManagerServer()
}

// UnimplementedLocalChainManagerServer must be embedded to have forward compatible implementations.
type UnimplementedLocalChainManagerServer struct {
}

func (UnimplementedLocalChainManagerServer) AddPeer(context.Context, *AddPeerRequest) (*AddPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPeer not implemented")
}
func (UnimplementedLocalChainManagerServer) RemovePeer(context.Context, *RemovePeerRequest) (*RemovePeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePeer not implemented")
}
func (UnimplementedLocalChainManagerServer) AddVoter(context.Context, *AddVoterRequest) (*AddVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVoter not implemented")
}
func (UnimplementedLocalChainManagerServer) AddTransaction(context.Context, *AddTransactionRequest) (*AddTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransaction not implemented")
}
func (UnimplementedLocalChainManagerServer) mustEmbedUnimplementedLocalChainManagerServer() {}

// UnsafeLocalChainManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalChainManagerServer will
// result in compilation errors.
type UnsafeLocalChainManagerServer interface {
	mustEmbedUnimplementedLocalChainManagerServer()
}

func RegisterLocalChainManagerServer(s grpc.ServiceRegistrar, srv LocalChainManagerServer) {
	s.RegisterService(&LocalChainManager_ServiceDesc, srv)
}

func _LocalChainManager_AddPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalChainManagerServer).AddPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalChainManager/AddPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalChainManagerServer).AddPeer(ctx, req.(*AddPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalChainManager_RemovePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalChainManagerServer).RemovePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalChainManager/RemovePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalChainManagerServer).RemovePeer(ctx, req.(*RemovePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalChainManager_AddVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalChainManagerServer).AddVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalChainManager/AddVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalChainManagerServer).AddVoter(ctx, req.(*AddVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalChainManager_AddTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalChainManagerServer).AddTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LocalChainManager/AddTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalChainManagerServer).AddTransaction(ctx, req.(*AddTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalChainManager_ServiceDesc is the grpc.ServiceDesc for LocalChainManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalChainManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LocalChainManager",
	HandlerType: (*LocalChainManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPeer",
			Handler:    _LocalChainManager_AddPeer_Handler,
		},
		{
			MethodName: "RemovePeer",
			Handler:    _LocalChainManager_RemovePeer_Handler,
		},
		{
			MethodName: "AddVoter",
			Handler:    _LocalChainManager_AddVoter_Handler,
		},
		{
			MethodName: "AddTransaction",
			Handler:    _LocalChainManager_AddTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/transport.proto",
}
