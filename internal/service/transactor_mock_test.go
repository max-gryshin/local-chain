// Code generated by MockGen. DO NOT EDIT.
// Source: transactor.go

// Package service_test is a generated GoMock package.
package service_test

import (
	types "local-chain/internal/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionStore is a mock of TransactionStore interface.
type MockTransactionStore struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionStoreMockRecorder
}

// MockTransactionStoreMockRecorder is the mock recorder for MockTransactionStore.
type MockTransactionStoreMockRecorder struct {
	mock *MockTransactionStore
}

// NewMockTransactionStore creates a new mock instance.
func NewMockTransactionStore(ctrl *gomock.Controller) *MockTransactionStore {
	mock := &MockTransactionStore{ctrl: ctrl}
	mock.recorder = &MockTransactionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionStore) EXPECT() *MockTransactionStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTransactionStore) Get(txHash []byte) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", txHash)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTransactionStoreMockRecorder) Get(txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTransactionStore)(nil).Get), txHash)
}
